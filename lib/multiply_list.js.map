{"version":3,"sources":["../src/multiply_list.js"],"names":["MultiplyList","list","limit","Symbol","iterator","value","isNumeric","n","isNaN","parseFloat","isFinite"],"mappings":";;;;;;;;;AAAA;;AACA;;;;IAEaA,Y,WAAAA,Y;AACT,0BAAYC,IAAZ,EAAkBC,KAAlB,EAAwB;AAAA;;AACpB,aAAKD,IAAL,GAAYA,IAAZ;AACA,aAAKC,KAAL,GAAaA,KAAb;AACH;;;aAEEC,OAAOC,Q;;;;;;;;;;;;wCACY,KAAKH,I;;;;;;;;AAAdI,iC;;iCACF,KAAKC,SAAL,CAAeD,KAAf,C;;;;;kCACIA,QAAM,KAAKH,K;;;;;;mCACJG,QAAM,C;;;;;;;;mCAENA,K;;;;;;;;mCAGJ,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAKRE,C,EAAG;AACT,mBAAO,CAACC,MAAMC,WAAWF,CAAX,CAAN,CAAD,IAAyBG,SAASH,CAAT,CAAhC;AACD","file":"multiply_list.js","sourcesContent":["import \"babel-core/register\";\r\nimport \"babel-polyfill\";\r\n\r\nexport class MultiplyList{\r\n    constructor(list, limit){\r\n        this.list = list;\r\n        this.limit = limit;\r\n    }\r\n\r\n    * [Symbol.iterator](){\r\n        for (var value of this.list){\r\n            if(this.isNumeric(value)){\r\n                if(value>this.limit){\r\n                    yield value*2;\r\n                }else{\r\n                    yield value;\r\n                }\r\n            }else{\r\n                yield 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    isNumeric(n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n      }\r\n    \r\n}\r\n\r\n"]}